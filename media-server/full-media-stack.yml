# COMBINED MEDIA SERVER STACK
# This file is automatically generated by combine-stacks.sh
# It combines all individual stack files for analysis purposes
# DO NOT USE THIS FILE FOR DEPLOYMENT - use the individual stack files instead
#
# Generated on: Sun May  4 14:50:50 EDT 2025
# Combined from:
#  - jelly-stack.yml (Jellyfin media server and request management)
#  - arr-stack.yml (Media management services - Sonarr, Radarr, etc.)
#  - media-download.yml (VPN tunnel and download clients)
#
# This combined file is intended for planning and analysis by LLMs
# to suggest efficiency improvements or configuration changes.

version: "3.8"

services:

  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    network_mode: host
    environment:
      - TZ=${TZ}
      - NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES}
      - NVIDIA_DRIVER_CAPABILITIES=${NVIDIA_DRIVER_CAPABILITIES}
      - JELLYFIN_PublishedServerUrl=${JELLYFIN_PUBLISHED_SERVER_URL}
    volumes:
      - ${MEDIA_SERVER_CONFIG}:/config
      - ${MEDIA_SERVER_CACHE}:/cache
      - ${MEDIA_SERVER_MEDIA}:/media
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    restart: unless-stopped

  #overseerr is a platform where users can request content for an admin(s) to process and grant
  jellyseerr:
    image: ghcr.io/fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    environment:
      - LOG_LEVEL=debug
      - TZ=${TZ}
      - PORT=5055 #optional
    ports:
      - 5055:5055
    volumes:
      - ${JELLYSEER_VOLUME}:/app/config
    restart: unless-stopped
  # ----------------------------------------
  # End of Jellyfin Media Server Stack services
  # ----------------------------------------

  #Sonarr is manager for automating downloads of tv shows
  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    ports:
      - 8989:8989
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${SONARR_VOLUME}:/config
      - ${MEDIA_SERVER_MEDIA}:/data/media
    restart: unless-stopped
    
  #Radarr is manager for automating downloads of movies  
  radarr:
    image: linuxserver/radarr
    container_name: radarr
    ports:
      - 7878:7878
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${RADARR_VOLUME}:/config
      - ${MEDIA_SERVER_MEDIA}:/data/media
    restart: unless-stopped

  # Lidarr is manager for automating downloads of music  
  lidarr:
    image: linuxserver/lidarr
    container_name: lidarr
    ports:
      - 8686:8686
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${LIDARR_VOLUME}:/config
      - ${MEDIA_SERVER_MEDIA}:/data/media
    restart: unless-stopped

  #Bazarr is a companion tool to Sonarr and Radarr for managing subtitles
  bazarr:
    image: linuxserver/bazarr
    container_name: bazarr
    ports:
      - 6767:6767
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BAZARR_VOLUME}:/config
      - ${MEDIA_SERVER_MEDIA}:/data/media
    restart: unless-stopped

  #Prowlarr is an integrated indexer that automatically updates to Radarr and Sonarr
  #it allows you to add indexers once, and them apply to all your downstream services
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    ports:
      - 9696:9696
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${PROWLARR_VOLUME}:/config
    restart: unless-stopped

  #Flaresolver is required for some indexers ( 1337x ) to bypass cloudflare and other blocks
  flaresolverr:
    image: flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    ports:
      - 8191:8191
    environment:
      - LOG_LEVEL=${LOG_LEVEL}
    restart: unless-stopped
  # ----------------------------------------
  # End of Media Management Stack services
  # ----------------------------------------

  #gluetun is a vpn tunnel that allows qbittorrent to download ONLY inside the vpn
  gluetun:
    image: qmcgaw/gluetun
    container_name: gluetun
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    # see directions for how to set up with nord
    environment:
      - VPN_SERVICE_PROVIDER=${VPN_SERVICE_PROVIDER}
      - VPN_TYPE=${VPN_TYPE}
      - OPENVPN_USER=${OPENVPN_USER}
      - OPENVPN_PASSWORD=${OPENVPN_PASSWORD}
      - SERVER_COUNTRIES=${SERVER_COUNTRIES}
      - TZ=${TZ}
      - DOT=${DOT}
      - DNS_ADDRESS=${DNS_ADDRESS}
    volumes:
      - ${GLUETUN_VOLUME}:/gluetun
      - ${MEDIA_SERVER_MEDIA}:/data/media
    ports:
      - 8080:8080       # qBittorrent Web UI
      - 6789:6789       # NZBGet UI
      - 6881:6881
      - 6881:6881/udp
    restart: unless-stopped
    
  #Torrent download client which manages torrent downloads
  qbittorrent:
    image: linuxserver/qbittorrent
    container_name: qbittorrent
    #using gluetun network to *only* downlaod through vpn
    network_mode: "service:gluetun"
    depends_on:
      gluetun:
        condition: service_healthy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - WEBUI_PORT=${WEBUI_PORT}
    volumes:
      - ${QBITTORRENT_VOLUME}:/config
      - ${MEDIA_SERVER_MEDIA}:/data/media
    restart: unless-stopped

  # NZB client (VPN)
  nzbget:
    image: linuxserver/nzbget
    container_name: nzbget
    network_mode: "service:gluetun"
    depends_on:
      gluetun:
        condition: service_healthy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${NZBGET_VOLUME}:/config
      - ${MEDIA_SERVER_MEDIA}:/data/media
      - ${NZBGET_Downloads}:/downloads
    restart: unless-stopped
  # ----------------------------------------
  # End of Media Download Stack services
  # ----------------------------------------

